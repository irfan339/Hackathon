[{"/Users/sulmham/Desktop/Hackathon/hackstart/src/index.js":"1","/Users/sulmham/Desktop/Hackathon/hackstart/src/App.js":"2","/Users/sulmham/Desktop/Hackathon/hackstart/src/reportWebVitals.js":"3","/Users/sulmham/Desktop/Hackathon/hackstart/src/Components/SelectionPage.js":"4","/Users/sulmham/Desktop/Hackathon/hackstart/src/redux/store.js":"5","/Users/sulmham/Desktop/Hackathon/hackstart/src/redux/MMGL/mmglAction.js":"6","/Users/sulmham/Desktop/Hackathon/hackstart/src/redux/MMGL/mmglReducer.js":"7","/Users/sulmham/Desktop/Hackathon/hackstart/src/Components/QuestionAnswersTemplate.js":"8","/Users/sulmham/Desktop/Hackathon/hackstart/src/Components/GLSetTable.js":"9"},{"size":547,"mtime":1608014675170,"results":"10","hashOfConfig":"11"},{"size":29866,"mtime":1608202053066,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1607924180789,"results":"13","hashOfConfig":"11"},{"size":1901,"mtime":1608033196273,"results":"14","hashOfConfig":"11"},{"size":337,"mtime":1608031957322,"results":"15","hashOfConfig":"11"},{"size":492,"mtime":1608032905397,"results":"16","hashOfConfig":"11"},{"size":451,"mtime":1608028166169,"results":"17","hashOfConfig":"11"},{"size":8017,"mtime":1608203503616,"results":"18","hashOfConfig":"11"},{"size":4229,"mtime":1608196894730,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1exsqw8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/sulmham/Desktop/Hackathon/hackstart/src/index.js",[],["45","46"],"/Users/sulmham/Desktop/Hackathon/hackstart/src/App.js",["47"],"import './App.css';\nimport React, {Component} from 'react';\nimport QuestionAnswersTemplate from './Components/QuestionAnswersTemplate';\nimport GLSetTable from './Components/GLSetTable';\nimport logo from './tiffany.png';\n\nclass App extends Component {\n    constructor(props) {\n      super(props);\n      this.state={\n          value:\"WelcomePage\",\n          WelcomePageSelection: null,\n          marketplace: null,\n          merchant: null,\n          merchantTypeState:null,\n          CompMatchStandardState:null,\n          ConfigsStandardState:null,\n          SelectGLForMerchantState:null,\n          PriceVarianceGLTableState:null,\n          ThresholdGLTableState:null,\n          MonitorGLTableState:null,\n          AddOnMerchantState:null,\n          MMGLError:null,\n          typeofMerchant:null,\n          childAnswers: []\n      };\n    }\n    addRadioToState(newValue) \n    {\n        if(newValue.stage === \"MerchantType\" && newValue.answer === \"Standard\"){\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"CompMatchStandard\" });\n        } else if(newValue.stage === \"CompMatchStandard\" && newValue.answer === \"Standard Template\"){\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"ConfigsStandard\" });\n        }  else if(newValue.stage === \"CompMatchStandard\" && newValue.answer === \"Related Merchant\"){\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"ParentMerchant\" });\n        }\n    }\n    onPreviousRadioButton(newValue)\n    {\n      if(newValue.stage === \"MerchantType\"){\n        this.setState({value:\"SelectionPage\",WelcomePageSelection:\"Launch\",merchantTypeState:null});\n      } else if(newValue.stage === \"CompMatchStandard\"){\n          var result = this.state.childAnswers.find(obj => {\n            return obj.stage === \"MerchantType\"\n          });\n          this.setState({merchantTypeState:result,CompMatchStandardState:null,\n                  value:\"MerchantType\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"MerchantType\")});\n      } else if(newValue.stage === \"ConfigsStandard\"){\n          var result1 = this.state.childAnswers.find(obj => {\n            return obj.stage === \"CompMatchStandard\"\n          });\n          this.setState({CompMatchStandardState:result1 , ConfigsStandardState:null,\n                  value:\"CompMatchStandard\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"CompMatchStandard\")});\n      } else if(newValue.stage === \"SelectGLForMerchant\"){\n        var prevCompMatch = this.state.childAnswers.find(obj => {\n          return obj.stage === \"CompMatchStandard\"\n        });\n        if(prevCompMatch.answer === \"Standard Template\"){\n          var result2a = this.state.childAnswers.find(obj => {\n            return obj.stage === \"ConfigsStandard\"\n          });\n          this.setState({ConfigsStandardState:result2a , SelectGLForMerchantState:null,\n                      value:\"ConfigsStandard\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"ConfigsStandard\")});\n        } else {\n          this.setState({value:\"ParentMerchant\", SelectGLForMerchantState:null});\n        }     \n      } else if(newValue.stage === \"AddOnMerchant\"){\n        var result3 = this.state.childAnswers.find(obj => {\n          return obj.stage === \"MonitorGLTable\"\n        });\n        this.setState({MonitorGLTableState:result3 , AddOnMerchantState:null,\n                    value:\"MonitorGLTable\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"MonitorGLTable\")});\n      }\n    }\n    addCheckboxToState(newValue)\n    {\n        if(newValue.stage === \"ConfigsStandard\")\n        {\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"SelectGLForMerchant\" });\n        } else if(newValue.stage === \"SelectGLForMerchant\")\n        {\n          var compmatch=this.state.childAnswers.find(obj => {return obj.stage === \"CompMatchStandard\"});\n          var valuetoPush=\"PriceVarianceGLTable\";\n          if(compmatch.answer === \"Related Merchant\"){\n            valuetoPush=\"SummaryPage\";\n          }\n          \n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:valuetoPush });\n        } else if(newValue.stage === \"AddOnMerchant\")\n        {\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"SummaryPage\" });\n        }\n    }\n    onPreviousGLTable(newValue){\n      if(newValue.stage === \"PriceVarianceGLTable\"){\n        var result = this.state.childAnswers.find(obj => {\n          return obj.stage === \"SelectGLForMerchant\"\n        });\n        this.setState({ SelectGLForMerchantState:result , PriceVarianceGLTableState:null,\n          value:\"SelectGLForMerchant\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"SelectGLForMerchant\") });\n      } else if(newValue.stage === \"ThresholdGLTable\"){\n        var result1 = this.state.childAnswers.find(obj => {\n          return obj.stage === \"PriceVarianceGLTable\"\n        });\n        this.setState({ PriceVarianceGLTableState:result1 ,ThresholdGLTableState:null,\n          value:\"PriceVarianceGLTable\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"PriceVarianceGLTable\") });\n      } else if(newValue.stage === \"MonitorGLTable\"){\n        var result2 = this.state.childAnswers.find(obj => {\n          return obj.stage === \"ThresholdGLTable\"\n        });\n        this.setState({ ThresholdGLTableState:result2 , MonitorGLTableState:null,\n          value:\"ThresholdGLTable\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"ThresholdGLTable\") });\n      }\n    }\n    addTableToState(newValue)\n    {\n        if(newValue.stage === \"PriceVarianceGLTable\"){\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"ThresholdGLTable\" });\n        } else if(newValue.stage === \"ThresholdGLTable\"){\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"MonitorGLTable\" });\n        } else if(newValue.stage === \"MonitorGLTable\"){\n          this.setState({ childAnswers:[...this.state.childAnswers,newValue], value:\"AddOnMerchant\" });\n        }\n    }\n    render()\n    {\n      var content;\n      if(this.state.value===\"WelcomePage\"){\n        content = this.renderWelcomePage();\n      } else if(this.state.value===\"SelectionPage\" && this.state.WelcomePageSelection===\"Launch\"){\n        content= this.renderSelectionPage();\n      } else if(this.state.value===\"MerchantType\" && this.state.WelcomePageSelection===\"Launch\"){\n        const {merchantTypeState}= this.state;\n        const answer=['Standard','3rd Party','Lister'];\n        content= <QuestionAnswersTemplate \n                    question={'What type of Merchant is this ? '} \n                    answer={answer} \n                    type={'radio'} \n                    defaultRadiovalue={merchantTypeState?answer.indexOf(merchantTypeState.answer):0}\n                    stage=\"MerchantType\"\n                    nextbuttonValue=\"Next\"\n                    addRadioToState={this.addRadioToState.bind(this)} \n                    addCheckboxToState={this.addCheckboxToState.bind(this)}\n                    onPreviousRadioButton={this.onPreviousRadioButton.bind(this)}\n                  />;\n      }  else if(this.state.value===\"CompMatchStandard\" && this.state.WelcomePageSelection===\"Launch\"){\n        const {CompMatchStandardState}= this.state;\n        const answer=['Standard Template','Related Merchant','Comp Match with related merchant as fall back'];\n        content= <QuestionAnswersTemplate \n                    question={'Select the Comp match strategy for this Merchant'} \n                    answer={answer} \n                    description={['Description: Recommends min(CMT,FMA) competitor input',\n                                  'Description: Inherits the price without any filter from parent merchant',\n                                  'Description: Price will be recommended at min(CMT,FMA). In absence of input price will be inherited from parent MKPL']}\n                    type={'radio'} \n                    defaultRadiovalue={CompMatchStandardState?answer.indexOf(CompMatchStandardState.answer):0}\n                    stage=\"CompMatchStandard\"\n                    nextbuttonValue={CompMatchStandardState?\"Configure \"+CompMatchStandardState.answer:\"Configure Standard Template\"}\n                    addRadioToState={this.addRadioToState.bind(this)} \n                    addCheckboxToState={this.addCheckboxToState.bind(this)}\n                    onPreviousRadioButton={this.onPreviousRadioButton.bind(this)}\n                  />;\n      } else if(this.state.value===\"ConfigsStandard\" && this.state.WelcomePageSelection===\"Launch\"){\n        const {ConfigsStandardState}= this.state;\n        const answer=['External Comp match','Internal Comp match','FBA Cede'];\n        content= <QuestionAnswersTemplate \n                    question={'Select Configs for Standard Template  '} \n                    answer={answer} \n                    type={'checkbox'} \n                    stage=\"ConfigsStandard\"\n                    defaultCheckboxValues={ConfigsStandardState?ConfigsStandardState.answer.map(a=> answer.indexOf(a)):[0,1,2]}\n                    nextbuttonValue=\"Proceed to GL Setup\"\n                    addRadioToState={this.addRadioToState.bind(this)}\n                    addCheckboxToState={this.addCheckboxToState.bind(this)}\n                    onPreviousRadioButton={this.onPreviousRadioButton.bind(this)}\n                  />;\n      } else if(this.state.value===\"SelectGLForMerchant\" && this.state.WelcomePageSelection===\"Launch\"){\n        const{SelectGLForMerchantState}=this.state;\n        const answer= ['Apparel','Books','Home Decor','Vehicles','Shoes'];\n        content= <QuestionAnswersTemplate \n                    question={'Select the GLs for this Merchant'} \n                    answer={answer} \n                    type={'checkbox'} \n                    defaultCheckboxValues={SelectGLForMerchantState?SelectGLForMerchantState.answer.map(a=>answer.indexOf(a)):[0,1]}\n                    stage=\"SelectGLForMerchant\"\n                    nextbuttonValue=\"Next\"\n                    addCheckboxToState={this.addCheckboxToState.bind(this)} \n                    addRadioToState={this.addRadioToState.bind(this)}\n                    onPreviousRadioButton={this.onPreviousRadioButton.bind(this)}\n                  />;\n      } else if(this.state.value===\"PriceVarianceGLTable\" && this.state.WelcomePageSelection===\"Launch\"){\n        const{PriceVarianceGLTableState}=this.state;\n        const answer= [ [1,2,3,4], \n                        [5,6,7,8], \n                        [9,10,11,12] ];\n        content= <GLSetTable question={'Enter the Price Variance for Selected GLs'}\n                        type={'PriceVarianceGLTable'}\n                        stage={'PriceVarianceGLTable'}\n                        rowHeadings={['Apparel','Books','Shoes']}\n                        columnHeadings={['Field1','Field2','Field3','Field4']}\n                        answer={PriceVarianceGLTableState? PriceVarianceGLTableState.answer: answer}\n                        nextbuttonValue=\"Submit and Proceed to Configure CP Caps\"\n                        addTableToState={this.addTableToState.bind(this)}\n                        onPreviousGLTable={this.onPreviousGLTable.bind(this)}\n                  />;\n      } else if(this.state.value===\"ThresholdGLTable\" && this.state.WelcomePageSelection===\"Launch\"){\n        const{ThresholdGLTableState}=this.state;\n        const answer= [ [120,230], \n                        [500,600], \n                        [90,110] ];\n        content= <GLSetTable question={'Enter the CP cap thresholds for Selected GLs'}\n                        type={'ThresholdGLTable'}\n                        stage={'ThresholdGLTable'}\n                        rowHeadings={['Apparel','Books','Shoes']}\n                        columnHeadings={['Field1','Field2']}\n                        answer={ThresholdGLTableState?ThresholdGLTableState.answer:answer}\n                        nextbuttonValue=\"Submit and Proceed to Configure Email notifications\"\n                        addTableToState={this.addTableToState.bind(this)}\n                        onPreviousGLTable={this.onPreviousGLTable.bind(this)}\n                  />;\n      }  else if(this.state.value===\"MonitorGLTable\" && this.state.WelcomePageSelection===\"Launch\"){\n        const{MonitorGLTableState}=this.state;\n        const answer = [ ['apparel@gmail.com',30], \n                         ['books@gmail.com',60], \n                         ['shoes@gmail.com',11] ];\n        content= <GLSetTable question={'Configure the demand monitors for Selected GLs'}\n                        type={'MonitorGLTable'}\n                        stage={'MonitorGLTable'}\n                        rowHeadings={['Apparel','Books','Shoes']}\n                        columnHeadings={['Email','Field2']}\n                        answer={MonitorGLTableState?MonitorGLTableState.answer:answer}\n                        nextbuttonValue=\"Submit and Proceed to enable add-ons\"\n                        addTableToState={this.addTableToState.bind(this)}\n                        onPreviousGLTable={this.onPreviousGLTable.bind(this)}\n                  />;\n      }  else if(this.state.value===\"AddOnMerchant\" && this.state.WelcomePageSelection===\"Launch\"){\n        const{AddOnMerchantState}=this.state;\n        const answer = ['Phase 2 Cede','Teen','PPU','H/B ASIN CP aware','MAP as floor','ECF as floor']\n        content= <QuestionAnswersTemplate \n                    question={'Select any add-ons that you would like to enable for the merchant '} \n                    answer={answer} \n                    type={'checkbox'} \n                    stage=\"AddOnMerchant\"\n                    defaultCheckboxValues={AddOnMerchantState?AddOnMerchantState.answer.map(a=> answer.indexOf(a)):[0,1,2,3,4,5]}\n                    nextbuttonValue=\"Next\"\n                    addCheckboxToState={this.addCheckboxToState.bind(this)} \n                    addRadioToState={this.addRadioToState.bind(this)}\n                    onPreviousRadioButton={this.onPreviousRadioButton.bind(this)}\n                    onPreviousGLTable={this.onPreviousGLTable.bind(this)}\n                  />;\n      } else if(this.state.value===\"SummaryPage\" && this.state.WelcomePageSelection===\"Launch\"){\n        content= this.renderSummaryPage();\n      } else if(this.state.value===\"FinishPage\" && this.state.WelcomePageSelection===\"Launch\"){\n        content= this.renderFinishPage();\n      }  else if(this.state.value===\"ParentMerchant\" && this.state.WelcomePageSelection===\"Launch\"){\n        content= this.renderParentMerchant();\n      }              \n      //end of above if \n      return (\n            <div className=\"App\">\n              \n              {this.renderAppTitle()}\n              <div className=\"box\"></div>\n              {content}\n            </div>\n        \n      );\n    }\n    renderAppTitle(){\n      return(\n        <div>\n          <div className=\" title-margin\">\n                <nav class=\"navbar navbar-expand-lg navbar-dark amazonColorDark\">\n                    <div class=\"container-fluid\">\n                      \n                      <button class=\"navbar-toggler \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span class=\"navbar-toggler-icon\"></span>\n                      </button>\n                      \n                        \n                      <div class=\"image-style nav-move-left\">\n                              <a href=\"/\"><img src={logo}></img></a>\n                      </div>\n                      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\"  href=\"https://stackoverflow.com/\">About</a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\" href=\"https://www.youtube.com/\">CTI</a>\n                          </li>\n                        </ul>\n                        <form class=\"d-flex fright\">\n                          <input class=\"form-control me-2 btn-txt\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n                          \n                          <button class=\"btn btn-outline-success btn-search\" type=\"submit\">Search</button>\n                        </form>\n                      </div>\n                    </div>\n                  </nav>\n            </div>      \n            <div className=\"container\">\n                <div class=\"boxreduce\"></div>\n                <h1> Launching Merchant </h1>\n            </div>\n        </div>\n        \n      );\n    }\n\n    renderLogo()\n    {\n      return(\n          <div class=\"topleft\">Top Left</div>\n      )\n    }\n    renderWelcomePage(){\n      return(\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-12 col-sm-4 col-md-4 col-lg-4 col-md-offset-1 boxStyle bg-white amazonBorderColorDark main-page-row\">\n                <div>logo here</div>\n                <div className=\"jumbotron bg-white\">\n                    <button type=\"button\" onClick={() => this.setState({WelcomePageSelection: \"Launch\",value:\"SelectionPage\"})} class=\"btn btn-primary btn-lg btn-1\">Launch</button>\n                    <p>Tiffany, your personal assistant will guide you to launch marketplaces, merchants, product groups and more.</p>\n                </div>\n              </div>\n            <div class=\"col-xs-12 col-sm-4 col-md-4 col-lg-4 boxStyle bg-white amazonBorderColorDark main-page-row\">\n              <div>logo here</div>\n              <div className=\"jumbotron bg-white\">\n                  <button type=\"button\"  onClick={() => this.setState({WelcomePageSelection: \"Manage\",value:\"SelectionPage\"})} class=\"btn btn-primary btn-lg btn-1\">Manage policies</button>\n                  <p>Want to change the pricing strategy or modify guardrails at an hierarchy level? Let Tiffany help you to add, remove or update policies.</p>\n              </div>\n            </div>\n            <div class=\"col-xs-12 col-sm-4 col-md-4 col-lg-4 boxStyle bg-white amazonBorderColorDark main-page-row\">\n              <div>logo here</div>\n              <div className=\"jumbotron bg-white\">\n                   <button type=\"button\" onClick={() => this.setState({WelcomePageSelection: \"Simulate\",value:\"SelectionPage\"})} class=\"btn btn-primary btn-lg btn-1\">Config Playground</button>\n                  <p>Recently launched an entity or updated the policy at an hierarchy level? Let Tiffany guide you through our simulation platform-Fortnight.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    renderSelectionPage(){\n      return(\n        <div>\n            <div class=\"sidenav text-white cs-card-txt\" >\n              <div class=\"card-header cs-card-txt\" >Hola Garvit</div>\n              <div class=\"card-body cs-card-txt\">\n                <h5 class=\"card-title\">I'm Tiffany</h5>\n                <p class=\"card-text\">I will be guiding you to launch a new entity or a GL into Retail Pricing. You don't need to understand many config keys.</p>\n              </div>\n            </div>\n            \n            <div className=\"container\">\n              \n              <h3 className=\"left\" >What  would you like to Lauch</h3>\n              \n             <select onChange={(event) => this.setState({marketplace:event.target.value})} class=\"browser-default custom-select custom-select-lg mb-3\">\n                  <option disabled selected={this.state.marketplace?false:true} hidden>Select Marketplace</option>\n                  <option value=\"US\" selected={this.state.marketplace === \"US\" ?true:false }>US</option>\n                  <option value=\"Amazon Fresh\" selected={this.state.marketplace === \"Amazon Fresh\" ?true:false }>Amazon Fresh</option>\n                  <option value=\"Mendel\" selected={this.state.marketplace === \"Mendel\" ?true:false }>Mendel</option>\n              </select>\n              <select onChange={(event) => this.setState({merchant:event.target.value})} class=\"browser-default custom-select custom-select-lg mb-3\">\n                  <option disabled selected={this.state.merchant?false:true} hidden>Select Merchant</option>\n                  <option value=\"Amazon Fresh\" selected={this.state.merchant === \"Amazon Fresh\" ?true:false }>Amazon Fresh</option>\n                  <option value=\"Amazon Lite\" selected={this.state.merchant === \"Amazon Lite\" ?true:false }>Amazon Lite</option>\n                  <option value=\"Amazon GO\" selected={this.state.merchant === \"Amazon GO\" ?true:false }>Amazon GO</option>\n              </select>\n              <select  class=\"browser-default custom-select custom-select-lg mb-3\">\n                  <option disabled selected hidden>Select Lister</option>\n              </select>\n              <select  class=\"browser-default custom-select custom-select-lg mb-3\">\n                  <option disabled selected hidden>Select GL</option>\n              </select>\n              <button type=\"button\" onClick={(e)=>this.setState({value:\"WelcomePage\",marketplace:null,merchant:null})} class=\"btn btn-primary btn-lg left amazonColorDark\" >Previous</button>\n              <button type=\"button\" onClick={this.onSelection.bind(this)} class=\"btn btn-primary btn-lg right amazonColorDark\" >Next</button>\n            </div>\n        </div> \n      );\n    }\n    \n    onSelection(){\n      const {marketplace,merchant} = this.state;\n      if(marketplace && merchant){\n        this.setState({MMGLError:null,value:\"MerchantType\"});\n      } else {\n        this.setState({MMGLError:\"All the fields need to be selceted\"});\n      }\n    }  \n\n    renderFinishPage(){\n      return(\n          <div className=\"container\">\n            <div className=\"jumbotron amazonColorWheat\">\n                <h4 color=\"green\">Done!</h4>\n                <div className=\"box\"></div>\n                <h3 color=\"green\">Workflow has been initiated to lauch the merchant.</h3>\n                <hr color=\"green\"></hr>\n            </div>\n          </div>\n      );\n    }\n    renderParentMerchant(){\n      return(\n        <div class=\"container\">\n          <div className=\"sidenavwhite amazonColorDark amazonText\">\n                    <div className=\"container\">Basic Details</div> \n                    <hr color=\"#edf0f\"></hr>\n                    <div className=\"container blueColor\" >Configure Pricing Strategy</div>\n                    <hr color=\"#edf0f\"></hr>\n                    <div className=\"container\">Setup GLs</div>\n                    <hr color=\"#edf0f\"></hr>\n                    <div className=\"container\" >Finish up!</div>\n            </div>\n          <div className=\"container\">\n              <h3 className=\"left\">Select the parent merchant</h3>   \n          </div>\n          <select onChange={(event) => this.setState({parentMerchant:event.target.value})} class=\"browser-default custom-select custom-select-lg mb-3\">\n              <option disabled selected={this.state.parentMerchant?false:true} hidden>Select the parent merchant from this dropdown</option>\n              <option value=\"US\" selected={this.state.parentMerchant === \"US\" ?true:false }>US</option>\n              <option value=\"Amazon Fresh\" selected={this.state.parentMerchant === \"Amazon Fresh\" ?true:false }>Amazon Fresh</option>\n              <option value=\"Mendel\" selected={this.state.parentMerchant === \"Mendel\" ?true:false }>Mendel</option>\n          </select>\n          <button type=\"button\" onClick={(e)=>this.setState({value:\"CompMatchStandard\",parentMerchant:null,\n          CompMatchStandardState:this.state.childAnswers.find(obj => {return obj.stage === \"CompMatchStandard\"}),\n          childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"CompMatchStandard\") })} \n                          class=\"btn btn-primary btn-lg left amazonColorDark\" >Previous</button>\n          <button type=\"button\" onClick={this.onParentMerchantSelection.bind(this)} class=\"btn btn-primary btn-lg right amazonColorDark\">Proceed to GL Setup</button>\n        </div>\n      );\n    }\n    onParentMerchantSelection(){\n      const {parentMerchant} = this.state;\n      if(parentMerchant){\n        this.setState({value:\"SelectGLForMerchant\"});\n      }\n    }  \n\n    renderSummaryPage(){\n      var compmatch=this.state.childAnswers.find(obj => {return obj.stage === \"CompMatchStandard\"});\n      var merchanttype=this.state.childAnswers.find(obj => {return obj.stage === \"MerchantType\"});\n      var gls=this.state.childAnswers.find(obj => {return obj.stage === \"SelectGLForMerchant\"});\n      if(compmatch.answer === \"Standard Template\"){\n        var configs=this.state.childAnswers.find(obj => {return obj.stage === \"ConfigsStandard\"});\n        var addon=this.state.childAnswers.find(obj => {return obj.stage === \"AddOnMerchant\"});\n        return(\n          <div class=\"container\">\n            <div class=\"sidenav text-white   cs-card-txt\" >\n              <div class=\"card-header cs-card-txt\">Hola Garvit</div>\n              <div class=\"card-body cs-card-txt\">\n                <h5 class=\"card-title\">I'm Tiffany</h5>\n                <p class=\"card-text\"> See the Summary of your Selection.</p>\n              </div>\n            </div>\n            <div className=\"container\">\n                <h3 className=\"left\">Here's the Summary of Merchant Lauch</h3>   \n            </div>\n            <br/>\n            <div class=\"table-responsive\">\n                      <table class=\"table table-hover\">\n                        <thead>\n                          <tr> <th>Key</th>  <th>Value</th></tr>\n                        </thead>\n                        <tbody> \n                          <tr> <td>Marketplace</td> <td>{this.state.marketplace}</td> </tr>\n                          <tr> <td>Merchant</td> <td>{this.state.merchant}</td> </tr>\n                          <tr> <td>Merchant Type</td> <td>{merchanttype.answer}</td> </tr>\n                          <tr> <td>Compmatch Strategy</td> <td>{compmatch.answer}</td> </tr>\n                          <tr> <td>Configs of Standard Template</td> <td>{\"[\"+configs.answer.toString()+\"]\"}</td> </tr>\n                          <tr> <td>GL selecteds</td> <td>{\"[\"+gls.answer.toString()+\"]\"}</td> </tr>\n                          <tr> <td>Add-On's</td> <td>{\"[\"+addon.answer.toString()+\"]\"}</td> </tr>\n                        </tbody>\n                      </table>\n            </div>\n\n            <button type=\"button\" onClick={this.onSummaryPagePrevious.bind(this)} class=\"btn btn-primary btn-lg left amazonColorDark\" >Previous</button>\n            <button type=\"button\" onClick={this.onSummaryPageSelection.bind(this)} class=\"btn btn-primary btn-lg right amazonColorDark\">Complete</button>\n          </div>\n        );\n      } else {\n        return(\n          <div class=\"container\">\n           <div class=\"sidenav text-white cs-card-txt\" >\n              <div class=\"card-header cs-card-txt\">Hola Garvit</div>\n              <div class=\"card-body cs-card-txt\">\n                <h5 class=\"card-title\">I'm Tiffany</h5>\n                <p class=\"card-text\"> See the Summary of your Selection.</p>\n              </div>\n            </div>\n            <div className=\"container\">\n                <h3 className=\"left\">Summary </h3>   \n            </div>\n            <br/>\n            <div class=\"table-responsive\">\n                      <table class=\"table table-hover\">\n                        <thead>\n                          <tr> <th>Key</th>  <th>Value</th></tr>\n                        </thead>\n                        <tbody> \n                          <tr> <td>Marketplace</td> <td>{this.state.marketplace}</td> </tr>\n                          <tr> <td>Merchant</td> <td>{this.state.merchant}</td> </tr>\n                          <tr> <td>Merchant Type</td> <td>{merchanttype.answer}</td> </tr>\n                          <tr> <td>Compmatch Strategy</td> <td>{compmatch.answer}</td> </tr>\n                          <tr> <td>Parent Merchant</td> <td>{this.state.parentMerchant}</td> </tr>\n                          <tr> <td>GL selecteds</td> <td>{\"[\"+gls.answer.toString()+\"]\"}</td> </tr>\n                        </tbody>\n                      </table>\n            </div>\n\n\n            <button type=\"button\" onClick={this.onSummaryPagePrevious.bind(this)} class=\"btn btn-primary btn-lg left amazonColorDark\" >Previous</button>\n            <button type=\"button\" onClick={this.onSummaryPageSelection.bind(this)} class=\"btn btn-primary btn-lg right amazonColorDark\">Complete</button>\n          </div>\n        );\n      }\n      \n    }\n    onSummaryPagePrevious(){\n      var compmatch=this.state.childAnswers.find(obj => {return obj.stage === \"CompMatchStandard\"});\n      if(compmatch.answer === \"Related Merchant\"){\n        var result = this.state.childAnswers.find(obj => {\n          return obj.stage === \"SelectGLForMerchant\"\n        });\n        this.setState({ SelectGLForMerchantState:result ,\n          value:\"SelectGLForMerchant\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"SelectGLForMerchant\") });\n      } else {\n        var result1 = this.state.childAnswers.find(obj => {\n          return obj.stage === \"AddOnMerchant\"\n        });\n        this.setState({ AddOnMerchantState:result1 ,\n          value:\"AddOnMerchant\",childAnswers:this.state.childAnswers.filter(obj=>obj.stage !== \"AddOnMerchant\") }); \n      }   \n    }\n    onSummaryPageSelection(){\n        this.setState({value:\"FinishPage\"});\n    }  \n}\n\nexport default App;\n","/Users/sulmham/Desktop/Hackathon/hackstart/src/reportWebVitals.js",[],"/Users/sulmham/Desktop/Hackathon/hackstart/src/Components/SelectionPage.js",["48"],"import React, {Component} from 'react';\nimport {  loadMarketplace, loadMerchant, loadGl} from '../redux/MMGL/mmglAction';\nimport {connect} from 'react-redux';\n\nclass SelectionPage extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n\n    render(){\n        const {loadMarketplace}=this.props;\n        console.log(this.props);\n        return(\n            <div class=\"container\">\n               <select class=\"browser-default custom-select custom-select-lg mb-3\">\n                    <option disabled selected hidden>Select Marketplace</option>\n                    <option value=\"1\">US</option>\n                    <option value=\"2\">Amazon Fresh</option>\n                    <option value=\"3\">Mendel</option>\n                </select>\n                <select  class=\"browser-default custom-select custom-select-lg mb-3\">\n                    <option disabled selected hidden>Select Merchant</option>\n                    <option value=\"1\">Amazon Fresh</option>\n                    <option value=\"2\">Amazon Lite</option>\n                    <option value=\"3\">Amazon GO</option>\n                </select>\n                <select  class=\"browser-default custom-select custom-select-lg mb-3\">\n                    <option disabled selected hidden>Select Product Group</option>\n                    <option value=\"1\">Apparel</option>\n                    <option value=\"2\">Furniture</option>\n                    <option value=\"3\">Grocery</option>\n                </select>\n                <button type=\"button\" class=\"btn btn-primary btn-lg\" onClick={loadMarketplace(\"okkk\")}>Check</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({MarketplaceMerchantGL: state.MarketplaceMerchantGL});\nconst mapDispatchToProps =  {  \n        loadMarketplace,\n        loadMerchant,\n        loadGl\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectionPage);",["49","50"],"/Users/sulmham/Desktop/Hackathon/hackstart/src/redux/store.js",["51","52"],"import { createStore, applyMiddleware } from 'redux'\nimport MarketplaceMerchantGL from './MMGL/mmglReducer';\n//import compose from 'helper/redux-dev-tools';\n// import thunk from 'redux-thunk';\n\n// const middleware = applyMiddleware(thunk);\nconst initialState = {};\nconst store = createStore(MarketplaceMerchantGL);\n\nexport default store;",["53","54"],"/Users/sulmham/Desktop/Hackathon/hackstart/src/redux/MMGL/mmglAction.js",[],"/Users/sulmham/Desktop/Hackathon/hackstart/src/redux/MMGL/mmglReducer.js",["55"],"import {\n    LOAD_MARKETPLACE,\n    LOAD_MERCHANT,\n    LOAD_GL\n} from \"./mmglAction\";\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case LOAD_MARKETPLACE:\n            return {...state, marketPlace: action.value };\n        case LOAD_MERCHANT:\n            return {...state, merchant: action.value };\n        case LOAD_GL:\n            return {...state, gl: action.value };\n        default:\n            return state;\n    }\n};","/Users/sulmham/Desktop/Hackathon/hackstart/src/Components/QuestionAnswersTemplate.js",[],"/Users/sulmham/Desktop/Hackathon/hackstart/src/Components/GLSetTable.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":282,"column":43,"nodeType":"62","endLine":282,"endColumn":59},{"ruleId":"63","severity":1,"message":"64","line":6,"column":5,"nodeType":"65","messageId":"66","endLine":8,"endColumn":6},{"ruleId":"56","replacedBy":"67"},{"ruleId":"58","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":23,"nodeType":"71","messageId":"72","endLine":1,"endColumn":38},{"ruleId":"69","severity":1,"message":"73","line":7,"column":7,"nodeType":"71","messageId":"72","endLine":7,"endColumn":19},{"ruleId":"56","replacedBy":"74"},{"ruleId":"58","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":7,"column":1,"nodeType":"78","endLine":18,"endColumn":3},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["79"],["80"],"no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","'initialState' is assigned a value but never used.",["79"],["80"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]